import axios from "axios";

const API_BASE_URL = "http://localhost:8000/api";

// Fonction pour r√©cup√©rer le token d'authentification
const getAuthHeaders = () => {
  const token = localStorage.getItem("token");
  return {
    "Content-Type": "application/json",
    Accept: "application/json",
    Authorization: token ? `Bearer ${token}` : "",
  };
};

const CategoryService = {
  // üîπ R√©cup√©rer toutes les cat√©gories
  getAll: async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/categories`, {
        headers: getAuthHeaders(),
      });
      return { success: true, data: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data?.message || "Erreur lors de la r√©cup√©ration des cat√©gories." };
    }
  },

  // üîπ R√©cup√©rer une cat√©gorie par ID
  getById: async (id) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/categories/${id}`, {
        headers: getAuthHeaders(),
      });
      return { success: true, data: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data?.message || "Erreur lors de la r√©cup√©ration de la cat√©gorie." };
    }
  },

  // üîπ Cr√©er une nouvelle cat√©gorie
  create: async (data) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/categories`, data, {
        headers: getAuthHeaders(),
      });
      return { success: true, data: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data?.message || "Erreur lors de la cr√©ation de la cat√©gorie." };
    }
  },

  // üîπ Mettre √† jour une cat√©gorie existante
  update: async (id, data) => {
    try {
      const response = await axios.put(`${API_BASE_URL}/categories/${id}`, data, {
        headers: getAuthHeaders(),
      });
      return { success: true, data: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data?.message || "Erreur lors de la mise √† jour de la cat√©gorie." };
    }
  },

  // üîπ Supprimer une cat√©gorie
  delete: async (id) => {
    try {
      await axios.delete(`${API_BASE_URL}/categories/${id}`, {
        headers: getAuthHeaders(),
      });
      return { success: true, message: "Cat√©gorie supprim√©e avec succ√®s." };
    } catch (error) {
      return { success: false, message: error.response?.data?.message || "Erreur lors de la suppression de la cat√©gorie." };
    }
  },
};

export default CategoryService;
